// Mocks generated by Mockito 5.4.2 from annotations
// in teigi_app/test/feature/definition/application/definition_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i14;
import 'package:teigi_app/feature/definition/domain/definition.dart' as _i15;
import 'package:teigi_app/feature/definition/repository/entity/definition_document.dart'
    as _i3;
import 'package:teigi_app/feature/definition/repository/fetch_definition_repository.dart'
    as _i8;
import 'package:teigi_app/feature/definition/repository/like_definition_repository.dart'
    as _i6;
import 'package:teigi_app/feature/user_profile/domain/user_profile.dart'
    as _i10;
import 'package:teigi_app/feature/user_profile/repository/entity/user_profile_document.dart'
    as _i4;
import 'package:teigi_app/feature/user_profile/repository/user_profile_repository.dart'
    as _i9;
import 'package:teigi_app/feature/word/domain/word_list_state.dart' as _i5;
import 'package:teigi_app/feature/word/repository/entity/word_document.dart'
    as _i12;
import 'package:teigi_app/feature/word/repository/word_repository.dart' as _i11;

import 'definition_state_test.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDefinitionDocument_1 extends _i1.SmartFake
    implements _i3.DefinitionDocument {
  _FakeDefinitionDocument_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserProfileDocument_2 extends _i1.SmartFake
    implements _i4.UserProfileDocument {
  _FakeUserProfileDocument_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWordListState_3 extends _i1.SmartFake implements _i5.WordListState {
  _FakeWordListState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LikeDefinitionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikeDefinitionRepository extends _i1.Mock
    implements _i6.LikeDefinitionRepository {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i7.Future<void> likeDefinition(
    String? definitionId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #likeDefinition,
          [
            definitionId,
            userId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> unlikeDefinition(
    String? definitionId,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlikeDefinition,
          [
            definitionId,
            userId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<String>> fetchAllLikedDefinitionIdList(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllLikedDefinitionIdList,
          [userId],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> deleteLikeByDefinitionId(String? definitionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteLikeByDefinitionId,
          [definitionId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isLikedByUser(
    String? userId,
    String? definitionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isLikedByUser,
          [
            userId,
            definitionId,
          ],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [FetchDefinitionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchDefinitionRepository extends _i1.Mock
    implements _i8.FetchDefinitionRepository {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i7.Future<_i3.DefinitionDocument> fetchDefinition(String? definitionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDefinition,
          [definitionId],
        ),
        returnValue:
            _i7.Future<_i3.DefinitionDocument>.value(_FakeDefinitionDocument_1(
          this,
          Invocation.method(
            #fetchDefinition,
            [definitionId],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.DefinitionDocument>.value(_FakeDefinitionDocument_1(
          this,
          Invocation.method(
            #fetchDefinition,
            [definitionId],
          ),
        )),
      ) as _i7.Future<_i3.DefinitionDocument>);

  @override
  _i7.Future<List<_i3.DefinitionDocument>> fetchAllPostedDefinitionDocList(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllPostedDefinitionDocList,
          [userId],
        ),
        returnValue: _i7.Future<List<_i3.DefinitionDocument>>.value(
            <_i3.DefinitionDocument>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i3.DefinitionDocument>>.value(
                <_i3.DefinitionDocument>[]),
      ) as _i7.Future<List<_i3.DefinitionDocument>>);
}

/// A class which mocks [UserProfileRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserProfileRepository extends _i1.Mock
    implements _i9.UserProfileRepository {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i7.Future<_i4.UserProfileDocument> fetchUserProfile(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserProfile,
          [userId],
        ),
        returnValue: _i7.Future<_i4.UserProfileDocument>.value(
            _FakeUserProfileDocument_2(
          this,
          Invocation.method(
            #fetchUserProfile,
            [userId],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i4.UserProfileDocument>.value(
            _FakeUserProfileDocument_2(
          this,
          Invocation.method(
            #fetchUserProfile,
            [userId],
          ),
        )),
      ) as _i7.Future<_i4.UserProfileDocument>);

  @override
  _i7.Future<void> updateUserProfile(_i10.UserProfile? userProfileForWrite) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [userProfileForWrite],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteUserProfile(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserProfile,
          [userId],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [WordRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWordRepository extends _i1.Mock implements _i11.WordRepository {
  @override
  _i2.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
        returnValueForMissingStub: _FakeFirebaseFirestore_0(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i2.FirebaseFirestore);

  @override
  _i7.Future<_i12.WordDocument?> fetchWordById(String? wordId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWordById,
          [wordId],
        ),
        returnValue: _i7.Future<_i12.WordDocument?>.value(),
        returnValueForMissingStub: _i7.Future<_i12.WordDocument?>.value(),
      ) as _i7.Future<_i12.WordDocument?>);

  @override
  _i7.Future<String?> findWordId(
    String? word,
    String? wordReading,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #findWordId,
          [
            word,
            wordReading,
          ],
        ),
        returnValue: _i7.Future<String?>.value(),
        returnValueForMissingStub: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<_i5.WordListState> fetchWordListStateByInitial(
    String? initial,
    String? currentUserId,
    List<String>? mutedUserIdList,
    _i2.QueryDocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWordListStateByInitial,
          [
            initial,
            currentUserId,
            mutedUserIdList,
            documentSnapshot,
          ],
        ),
        returnValue: _i7.Future<_i5.WordListState>.value(_FakeWordListState_3(
          this,
          Invocation.method(
            #fetchWordListStateByInitial,
            [
              initial,
              currentUserId,
              mutedUserIdList,
              documentSnapshot,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.WordListState>.value(_FakeWordListState_3(
          this,
          Invocation.method(
            #fetchWordListStateByInitial,
            [
              initial,
              currentUserId,
              mutedUserIdList,
              documentSnapshot,
            ],
          ),
        )),
      ) as _i7.Future<_i5.WordListState>);

  @override
  _i7.Future<_i5.WordListState> fetchWordListStateBySearchWord(
    String? searchWord,
    String? currentUserId,
    List<String>? mutedUserIdList,
    _i2.QueryDocumentSnapshot<Object?>? documentSnapshot,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchWordListStateBySearchWord,
          [
            searchWord,
            currentUserId,
            mutedUserIdList,
            documentSnapshot,
          ],
        ),
        returnValue: _i7.Future<_i5.WordListState>.value(_FakeWordListState_3(
          this,
          Invocation.method(
            #fetchWordListStateBySearchWord,
            [
              searchWord,
              currentUserId,
              mutedUserIdList,
              documentSnapshot,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.WordListState>.value(_FakeWordListState_3(
          this,
          Invocation.method(
            #fetchWordListStateBySearchWord,
            [
              searchWord,
              currentUserId,
              mutedUserIdList,
              documentSnapshot,
            ],
          ),
        )),
      ) as _i7.Future<_i5.WordListState>);

  @override
  _i7.Future<int> fetchPostedDefinitionCount(
    String? wordId,
    String? currentUserId,
    List<String>? mutedUserIdList,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchPostedDefinitionCount,
          [
            wordId,
            currentUserId,
            mutedUserIdList,
          ],
        ),
        returnValue: _i7.Future<int>.value(0),
        returnValueForMissingStub: _i7.Future<int>.value(0),
      ) as _i7.Future<int>);
}

/// A class which mocks [Listener].
///
/// See the documentation for Mockito's code generation for more information.
class MockListener extends _i1.Mock
    implements _i13.Listener<_i14.AsyncValue<_i15.Definition>> {
  @override
  void call(
    _i14.AsyncValue<_i15.Definition>? previous,
    _i14.AsyncValue<_i15.Definition>? next,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #call,
          [
            previous,
            next,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
